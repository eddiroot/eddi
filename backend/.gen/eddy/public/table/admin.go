//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Admin = newAdminTable("public", "Admin", "")

type adminTable struct {
	postgres.Table

	// Columns
	ID            postgres.ColumnInteger
	InstitutionId postgres.ColumnInteger
	Username      postgres.ColumnString
	Password      postgres.ColumnString
	CreatedAt     postgres.ColumnTimestamp
	ModifiedAt    postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type AdminTable struct {
	adminTable

	EXCLUDED adminTable
}

// AS creates new AdminTable with assigned alias
func (a AdminTable) AS(alias string) *AdminTable {
	return newAdminTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AdminTable with assigned schema name
func (a AdminTable) FromSchema(schemaName string) *AdminTable {
	return newAdminTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AdminTable with assigned table prefix
func (a AdminTable) WithPrefix(prefix string) *AdminTable {
	return newAdminTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AdminTable with assigned table suffix
func (a AdminTable) WithSuffix(suffix string) *AdminTable {
	return newAdminTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAdminTable(schemaName, tableName, alias string) *AdminTable {
	return &AdminTable{
		adminTable: newAdminTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newAdminTableImpl("", "excluded", ""),
	}
}

func newAdminTableImpl(schemaName, tableName, alias string) adminTable {
	var (
		IDColumn            = postgres.IntegerColumn("id")
		InstitutionIdColumn = postgres.IntegerColumn("institutionId")
		UsernameColumn      = postgres.StringColumn("username")
		PasswordColumn      = postgres.StringColumn("password")
		CreatedAtColumn     = postgres.TimestampColumn("createdAt")
		ModifiedAtColumn    = postgres.TimestampColumn("modifiedAt")
		allColumns          = postgres.ColumnList{IDColumn, InstitutionIdColumn, UsernameColumn, PasswordColumn, CreatedAtColumn, ModifiedAtColumn}
		mutableColumns      = postgres.ColumnList{InstitutionIdColumn, UsernameColumn, PasswordColumn, CreatedAtColumn, ModifiedAtColumn}
		defaultColumns      = postgres.ColumnList{IDColumn, CreatedAtColumn}
	)

	return adminTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		InstitutionId: InstitutionIdColumn,
		Username:      UsernameColumn,
		Password:      PasswordColumn,
		CreatedAt:     CreatedAtColumn,
		ModifiedAt:    ModifiedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
