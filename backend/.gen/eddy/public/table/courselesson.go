//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var CourseLesson = newCourseLessonTable("public", "CourseLesson", "")

type courseLessonTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnInteger
	CourseId    postgres.ColumnInteger
	CourseWeek  postgres.ColumnInteger
	Title       postgres.ColumnString
	Description postgres.ColumnString
	CreatedAt   postgres.ColumnTimestamp
	ModifiedAt  postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type CourseLessonTable struct {
	courseLessonTable

	EXCLUDED courseLessonTable
}

// AS creates new CourseLessonTable with assigned alias
func (a CourseLessonTable) AS(alias string) *CourseLessonTable {
	return newCourseLessonTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CourseLessonTable with assigned schema name
func (a CourseLessonTable) FromSchema(schemaName string) *CourseLessonTable {
	return newCourseLessonTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CourseLessonTable with assigned table prefix
func (a CourseLessonTable) WithPrefix(prefix string) *CourseLessonTable {
	return newCourseLessonTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CourseLessonTable with assigned table suffix
func (a CourseLessonTable) WithSuffix(suffix string) *CourseLessonTable {
	return newCourseLessonTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCourseLessonTable(schemaName, tableName, alias string) *CourseLessonTable {
	return &CourseLessonTable{
		courseLessonTable: newCourseLessonTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newCourseLessonTableImpl("", "excluded", ""),
	}
}

func newCourseLessonTableImpl(schemaName, tableName, alias string) courseLessonTable {
	var (
		IDColumn          = postgres.IntegerColumn("id")
		CourseIdColumn    = postgres.IntegerColumn("courseId")
		CourseWeekColumn  = postgres.IntegerColumn("courseWeek")
		TitleColumn       = postgres.StringColumn("title")
		DescriptionColumn = postgres.StringColumn("description")
		CreatedAtColumn   = postgres.TimestampColumn("createdAt")
		ModifiedAtColumn  = postgres.TimestampColumn("modifiedAt")
		allColumns        = postgres.ColumnList{IDColumn, CourseIdColumn, CourseWeekColumn, TitleColumn, DescriptionColumn, CreatedAtColumn, ModifiedAtColumn}
		mutableColumns    = postgres.ColumnList{CourseIdColumn, CourseWeekColumn, TitleColumn, DescriptionColumn, CreatedAtColumn, ModifiedAtColumn}
		defaultColumns    = postgres.ColumnList{IDColumn, CreatedAtColumn}
	)

	return courseLessonTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		CourseId:    CourseIdColumn,
		CourseWeek:  CourseWeekColumn,
		Title:       TitleColumn,
		Description: DescriptionColumn,
		CreatedAt:   CreatedAtColumn,
		ModifiedAt:  ModifiedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
