//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var UserCourse = newUserCourseTable("public", "UserCourse", "")

type userCourseTable struct {
	postgres.Table

	// Columns
	ID         postgres.ColumnInteger
	UserId     postgres.ColumnInteger
	CourseId   postgres.ColumnInteger
	Year       postgres.ColumnInteger
	Semester   postgres.ColumnInteger
	Role       postgres.ColumnString
	IsComplete postgres.ColumnBool
	IsArchived postgres.ColumnBool
	CreatedAt  postgres.ColumnTimestamp
	ModifiedAt postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type UserCourseTable struct {
	userCourseTable

	EXCLUDED userCourseTable
}

// AS creates new UserCourseTable with assigned alias
func (a UserCourseTable) AS(alias string) *UserCourseTable {
	return newUserCourseTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserCourseTable with assigned schema name
func (a UserCourseTable) FromSchema(schemaName string) *UserCourseTable {
	return newUserCourseTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserCourseTable with assigned table prefix
func (a UserCourseTable) WithPrefix(prefix string) *UserCourseTable {
	return newUserCourseTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserCourseTable with assigned table suffix
func (a UserCourseTable) WithSuffix(suffix string) *UserCourseTable {
	return newUserCourseTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserCourseTable(schemaName, tableName, alias string) *UserCourseTable {
	return &UserCourseTable{
		userCourseTable: newUserCourseTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newUserCourseTableImpl("", "excluded", ""),
	}
}

func newUserCourseTableImpl(schemaName, tableName, alias string) userCourseTable {
	var (
		IDColumn         = postgres.IntegerColumn("id")
		UserIdColumn     = postgres.IntegerColumn("userId")
		CourseIdColumn   = postgres.IntegerColumn("courseId")
		YearColumn       = postgres.IntegerColumn("year")
		SemesterColumn   = postgres.IntegerColumn("semester")
		RoleColumn       = postgres.StringColumn("role")
		IsCompleteColumn = postgres.BoolColumn("isComplete")
		IsArchivedColumn = postgres.BoolColumn("isArchived")
		CreatedAtColumn  = postgres.TimestampColumn("createdAt")
		ModifiedAtColumn = postgres.TimestampColumn("modifiedAt")
		allColumns       = postgres.ColumnList{IDColumn, UserIdColumn, CourseIdColumn, YearColumn, SemesterColumn, RoleColumn, IsCompleteColumn, IsArchivedColumn, CreatedAtColumn, ModifiedAtColumn}
		mutableColumns   = postgres.ColumnList{UserIdColumn, CourseIdColumn, YearColumn, SemesterColumn, RoleColumn, IsCompleteColumn, IsArchivedColumn, CreatedAtColumn, ModifiedAtColumn}
		defaultColumns   = postgres.ColumnList{IDColumn, IsCompleteColumn, IsArchivedColumn, CreatedAtColumn}
	)

	return userCourseTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		UserId:     UserIdColumn,
		CourseId:   CourseIdColumn,
		Year:       YearColumn,
		Semester:   SemesterColumn,
		Role:       RoleColumn,
		IsComplete: IsCompleteColumn,
		IsArchived: IsArchivedColumn,
		CreatedAt:  CreatedAtColumn,
		ModifiedAt: ModifiedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
