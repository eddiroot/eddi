//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var CourseLessonSectionBlock = newCourseLessonSectionBlockTable("public", "CourseLessonSectionBlock", "")

type courseLessonSectionBlockTable struct {
	postgres.Table

	// Columns
	ID                    postgres.ColumnInteger
	CourseLessonSectionId postgres.ColumnInteger
	Title                 postgres.ColumnString
	Description           postgres.ColumnString
	Type                  postgres.ColumnString
	CreatedAt             postgres.ColumnTimestamp
	ModifiedAt            postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type CourseLessonSectionBlockTable struct {
	courseLessonSectionBlockTable

	EXCLUDED courseLessonSectionBlockTable
}

// AS creates new CourseLessonSectionBlockTable with assigned alias
func (a CourseLessonSectionBlockTable) AS(alias string) *CourseLessonSectionBlockTable {
	return newCourseLessonSectionBlockTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CourseLessonSectionBlockTable with assigned schema name
func (a CourseLessonSectionBlockTable) FromSchema(schemaName string) *CourseLessonSectionBlockTable {
	return newCourseLessonSectionBlockTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CourseLessonSectionBlockTable with assigned table prefix
func (a CourseLessonSectionBlockTable) WithPrefix(prefix string) *CourseLessonSectionBlockTable {
	return newCourseLessonSectionBlockTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CourseLessonSectionBlockTable with assigned table suffix
func (a CourseLessonSectionBlockTable) WithSuffix(suffix string) *CourseLessonSectionBlockTable {
	return newCourseLessonSectionBlockTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCourseLessonSectionBlockTable(schemaName, tableName, alias string) *CourseLessonSectionBlockTable {
	return &CourseLessonSectionBlockTable{
		courseLessonSectionBlockTable: newCourseLessonSectionBlockTableImpl(schemaName, tableName, alias),
		EXCLUDED:                      newCourseLessonSectionBlockTableImpl("", "excluded", ""),
	}
}

func newCourseLessonSectionBlockTableImpl(schemaName, tableName, alias string) courseLessonSectionBlockTable {
	var (
		IDColumn                    = postgres.IntegerColumn("id")
		CourseLessonSectionIdColumn = postgres.IntegerColumn("courseLessonSectionId")
		TitleColumn                 = postgres.StringColumn("title")
		DescriptionColumn           = postgres.StringColumn("description")
		TypeColumn                  = postgres.StringColumn("type")
		CreatedAtColumn             = postgres.TimestampColumn("createdAt")
		ModifiedAtColumn            = postgres.TimestampColumn("modifiedAt")
		allColumns                  = postgres.ColumnList{IDColumn, CourseLessonSectionIdColumn, TitleColumn, DescriptionColumn, TypeColumn, CreatedAtColumn, ModifiedAtColumn}
		mutableColumns              = postgres.ColumnList{CourseLessonSectionIdColumn, TitleColumn, DescriptionColumn, TypeColumn, CreatedAtColumn, ModifiedAtColumn}
		defaultColumns              = postgres.ColumnList{IDColumn, CreatedAtColumn}
	)

	return courseLessonSectionBlockTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                    IDColumn,
		CourseLessonSectionId: CourseLessonSectionIdColumn,
		Title:                 TitleColumn,
		Description:           DescriptionColumn,
		Type:                  TypeColumn,
		CreatedAt:             CreatedAtColumn,
		ModifiedAt:            ModifiedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
