//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Course = newCourseTable("public", "Course", "")

type courseTable struct {
	postgres.Table

	// Columns
	ID            postgres.ColumnInteger
	InstitutionId postgres.ColumnInteger
	Name          postgres.ColumnString
	Description   postgres.ColumnString
	CreatedAt     postgres.ColumnTimestamp
	ModifiedAt    postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type CourseTable struct {
	courseTable

	EXCLUDED courseTable
}

// AS creates new CourseTable with assigned alias
func (a CourseTable) AS(alias string) *CourseTable {
	return newCourseTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CourseTable with assigned schema name
func (a CourseTable) FromSchema(schemaName string) *CourseTable {
	return newCourseTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CourseTable with assigned table prefix
func (a CourseTable) WithPrefix(prefix string) *CourseTable {
	return newCourseTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CourseTable with assigned table suffix
func (a CourseTable) WithSuffix(suffix string) *CourseTable {
	return newCourseTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCourseTable(schemaName, tableName, alias string) *CourseTable {
	return &CourseTable{
		courseTable: newCourseTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newCourseTableImpl("", "excluded", ""),
	}
}

func newCourseTableImpl(schemaName, tableName, alias string) courseTable {
	var (
		IDColumn            = postgres.IntegerColumn("id")
		InstitutionIdColumn = postgres.IntegerColumn("institutionId")
		NameColumn          = postgres.StringColumn("name")
		DescriptionColumn   = postgres.StringColumn("description")
		CreatedAtColumn     = postgres.TimestampColumn("createdAt")
		ModifiedAtColumn    = postgres.TimestampColumn("modifiedAt")
		allColumns          = postgres.ColumnList{IDColumn, InstitutionIdColumn, NameColumn, DescriptionColumn, CreatedAtColumn, ModifiedAtColumn}
		mutableColumns      = postgres.ColumnList{InstitutionIdColumn, NameColumn, DescriptionColumn, CreatedAtColumn, ModifiedAtColumn}
		defaultColumns      = postgres.ColumnList{IDColumn, CreatedAtColumn}
	)

	return courseTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		InstitutionId: InstitutionIdColumn,
		Name:          NameColumn,
		Description:   DescriptionColumn,
		CreatedAt:     CreatedAtColumn,
		ModifiedAt:    ModifiedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
