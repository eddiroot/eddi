//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var CourseThread = newCourseThreadTable("public", "CourseThread", "")

type courseThreadTable struct {
	postgres.Table

	// Columns
	ID         postgres.ColumnInteger
	CourseId   postgres.ColumnInteger
	UserId     postgres.ColumnInteger
	Title      postgres.ColumnString
	Content    postgres.ColumnString
	CreatedAt  postgres.ColumnTimestamp
	ModifiedAt postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type CourseThreadTable struct {
	courseThreadTable

	EXCLUDED courseThreadTable
}

// AS creates new CourseThreadTable with assigned alias
func (a CourseThreadTable) AS(alias string) *CourseThreadTable {
	return newCourseThreadTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CourseThreadTable with assigned schema name
func (a CourseThreadTable) FromSchema(schemaName string) *CourseThreadTable {
	return newCourseThreadTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CourseThreadTable with assigned table prefix
func (a CourseThreadTable) WithPrefix(prefix string) *CourseThreadTable {
	return newCourseThreadTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CourseThreadTable with assigned table suffix
func (a CourseThreadTable) WithSuffix(suffix string) *CourseThreadTable {
	return newCourseThreadTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCourseThreadTable(schemaName, tableName, alias string) *CourseThreadTable {
	return &CourseThreadTable{
		courseThreadTable: newCourseThreadTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newCourseThreadTableImpl("", "excluded", ""),
	}
}

func newCourseThreadTableImpl(schemaName, tableName, alias string) courseThreadTable {
	var (
		IDColumn         = postgres.IntegerColumn("id")
		CourseIdColumn   = postgres.IntegerColumn("courseId")
		UserIdColumn     = postgres.IntegerColumn("userId")
		TitleColumn      = postgres.StringColumn("title")
		ContentColumn    = postgres.StringColumn("content")
		CreatedAtColumn  = postgres.TimestampColumn("createdAt")
		ModifiedAtColumn = postgres.TimestampColumn("modifiedAt")
		allColumns       = postgres.ColumnList{IDColumn, CourseIdColumn, UserIdColumn, TitleColumn, ContentColumn, CreatedAtColumn, ModifiedAtColumn}
		mutableColumns   = postgres.ColumnList{CourseIdColumn, UserIdColumn, TitleColumn, ContentColumn, CreatedAtColumn, ModifiedAtColumn}
		defaultColumns   = postgres.ColumnList{IDColumn, CreatedAtColumn}
	)

	return courseThreadTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		CourseId:   CourseIdColumn,
		UserId:     UserIdColumn,
		Title:      TitleColumn,
		Content:    ContentColumn,
		CreatedAt:  CreatedAtColumn,
		ModifiedAt: ModifiedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
