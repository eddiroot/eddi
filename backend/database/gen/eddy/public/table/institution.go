//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Institution = newInstitutionTable("public", "Institution", "")

type institutionTable struct {
	postgres.Table

	// Columns
	ID         postgres.ColumnInteger
	Name       postgres.ColumnString
	Continent  postgres.ColumnString
	CreatedAt  postgres.ColumnTimestamp
	ModifiedAt postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type InstitutionTable struct {
	institutionTable

	EXCLUDED institutionTable
}

// AS creates new InstitutionTable with assigned alias
func (a InstitutionTable) AS(alias string) *InstitutionTable {
	return newInstitutionTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new InstitutionTable with assigned schema name
func (a InstitutionTable) FromSchema(schemaName string) *InstitutionTable {
	return newInstitutionTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new InstitutionTable with assigned table prefix
func (a InstitutionTable) WithPrefix(prefix string) *InstitutionTable {
	return newInstitutionTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new InstitutionTable with assigned table suffix
func (a InstitutionTable) WithSuffix(suffix string) *InstitutionTable {
	return newInstitutionTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newInstitutionTable(schemaName, tableName, alias string) *InstitutionTable {
	return &InstitutionTable{
		institutionTable: newInstitutionTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newInstitutionTableImpl("", "excluded", ""),
	}
}

func newInstitutionTableImpl(schemaName, tableName, alias string) institutionTable {
	var (
		IDColumn         = postgres.IntegerColumn("id")
		NameColumn       = postgres.StringColumn("name")
		ContinentColumn  = postgres.StringColumn("continent")
		CreatedAtColumn  = postgres.TimestampColumn("createdAt")
		ModifiedAtColumn = postgres.TimestampColumn("modifiedAt")
		allColumns       = postgres.ColumnList{IDColumn, NameColumn, ContinentColumn, CreatedAtColumn, ModifiedAtColumn}
		mutableColumns   = postgres.ColumnList{NameColumn, ContinentColumn, CreatedAtColumn, ModifiedAtColumn}
		defaultColumns   = postgres.ColumnList{IDColumn, CreatedAtColumn}
	)

	return institutionTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		Name:       NameColumn,
		Continent:  ContinentColumn,
		CreatedAt:  CreatedAtColumn,
		ModifiedAt: ModifiedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
